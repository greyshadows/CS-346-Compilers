Grammar

    0 $accept: start $end

    1 start: declarations VOID MAIN '(' argument_list ')' block
    2      | VOID MAIN '(' argument_list ')' block
    3      | declarations VOID MAIN '(' ')' block
    4      | VOID MAIN '(' ')' block

    5 declarations: variable_declaration
    6             | function_declaration
    7             | error "void"
    8             | error ';'
    9             | error '}'
   10             | error '\n'

   11 type: INT
   12     | BOOL

   13 block: '{' statements '}'
   14      | '{' '}'

   15 variable_declaration: type IDENTIFIER ';'
   16                     | type IDENTIFIER '=' all_expression ';'

   17 function_declaration: type IDENTIFIER '(' ')' '{' statements RETURN_statement '}'
   18                     | type IDENTIFIER '(' argument_list ')' '{' statements RETURN_statement '}'

   19 RETURN_statement: RETURN all_expression ';'

   20 statements: statement
   21           | statement statements

   22 argument_list: argument
   23              | argument ',' argument_list

   24 argument: type IDENTIFIER

   25 statement: ';'
   26          | variable_declaration
   27          | expression ';'
   28          | assignment_expression ';'
   29          | IF_statement
   30          | WHILE_statement
   31          | function_call_statement
   32          | block
   33          | error ';'
   34          | error '}'
   35          | error '\n'

   36 function_call_statement: IDENTIFIER '(' parameters ')' ';'
   37                        | IDENTIFIER '(' ')' ';'

   38 parameters: all_expression
   39           | parameters ',' all_expression

   40 IF_statement: IF '(' logical_expression ')' statement
   41             | IF '(' logical_expression ')' statement ELSE statement

   42 WHILE_statement: WHILE '(' logical_expression ')' statement

   43 all_expression: expression
   44               | logical_expression

   45 expression: additive_expression

   46 assignment_expression: IDENTIFIER '=' all_expression

   47 expression_unit: CONSTANT
   48                | IDENTIFIER
   49                | '(' expression ')'

   50 unary_expression: expression_unit
   51                 | '-' expression_unit

   52 additive_expression: multiplicative_expression
   53                    | additive_expression '+' multiplicative_expression
   54                    | additive_expression '-' multiplicative_expression

   55 multiplicative_expression: unary_expression
   56                          | multiplicative_expression '*' unary_expression
   57                          | multiplicative_expression '/' unary_expression

   58 logical_expression: expression_unit '<' expression_unit
   59                   | expression_unit '>' expression_unit
   60                   | expression_unit LE expression_unit
   61                   | expression_unit GE expression_unit
   62                   | expression_unit EQ expression_unit
   63                   | expression_unit NE expression_unit
   64                   | TRUE
   65                   | FALSE
   66                   | logical_expression AND expression_unit
   67                   | logical_expression OR expression_unit


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 10 35
'(' (40) 1 2 3 4 17 18 36 37 40 41 42 49
')' (41) 1 2 3 4 17 18 36 37 40 41 42 49
'*' (42) 56
'+' (43) 53
',' (44) 23 39
'-' (45) 51 54
'/' (47) 57
';' (59) 8 15 16 19 25 27 28 33 36 37
'<' (60) 58
'=' (61) 16 46
'>' (62) 59
'{' (123) 13 14 17 18
'}' (125) 9 13 14 17 18 34
error (256) 7 8 9 10 33 34 35
CONSTANT (258) 47
IDENTIFIER (259) 15 16 17 18 24 36 37 46 48
INT (260) 11
BOOL (261) 12
MAIN (262) 1 2 3 4
IF (263) 40 41
ELSE (264) 41
WHILE (265) 42
RETURN (266) 19
TRUE (267) 64
FALSE (268) 65
GE (269) 61
LE (270) 60
NE (271) 63
EQ (272) 62
AND (273) 66
OR (274) 67
VOID (275) 1 2 3 4
NO_ELSE (276)
"void" (277) 7


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
start (38)
    on left: 1 2 3 4, on right: 0
declarations (39)
    on left: 5 6 7 8 9 10, on right: 1 3
type (40)
    on left: 11 12, on right: 15 16 17 18 24
block (41)
    on left: 13 14, on right: 1 2 3 4 32
variable_declaration (42)
    on left: 15 16, on right: 5 26
function_declaration (43)
    on left: 17 18, on right: 6
RETURN_statement (44)
    on left: 19, on right: 17 18
statements (45)
    on left: 20 21, on right: 13 17 18 21
argument_list (46)
    on left: 22 23, on right: 1 2 18 23
argument (47)
    on left: 24, on right: 22 23
statement (48)
    on left: 25 26 27 28 29 30 31 32 33 34 35, on right: 20 21 40 41
    42
function_call_statement (49)
    on left: 36 37, on right: 31
parameters (50)
    on left: 38 39, on right: 36 39
IF_statement (51)
    on left: 40 41, on right: 29
WHILE_statement (52)
    on left: 42, on right: 30
all_expression (53)
    on left: 43 44, on right: 16 19 38 39 46
expression (54)
    on left: 45, on right: 27 43 49
assignment_expression (55)
    on left: 46, on right: 28
expression_unit (56)
    on left: 47 48 49, on right: 50 51 58 59 60 61 62 63 66 67
unary_expression (57)
    on left: 50 51, on right: 55 56 57
additive_expression (58)
    on left: 52 53 54, on right: 45 53 54
multiplicative_expression (59)
    on left: 55 56 57, on right: 52 53 54 56 57
logical_expression (60)
    on left: 58 59 60 61 62 63 64 65 66 67, on right: 40 41 42 44 66
    67


state 0

    0 $accept: . start $end

    error  shift, and go to state 1
    INT    shift, and go to state 2
    BOOL   shift, and go to state 3
    VOID   shift, and go to state 4

    start                 go to state 5
    declarations          go to state 6
    type                  go to state 7
    variable_declaration  go to state 8
    function_declaration  go to state 9


state 1

    7 declarations: error . "void"
    8             | error . ';'
    9             | error . '}'
   10             | error . '\n'

    "void"  shift, and go to state 10
    ';'     shift, and go to state 11
    '}'     shift, and go to state 12
    '\n'    shift, and go to state 13


state 2

   11 type: INT .

    $default  reduce using rule 11 (type)


state 3

   12 type: BOOL .

    $default  reduce using rule 12 (type)


state 4

    2 start: VOID . MAIN '(' argument_list ')' block
    4      | VOID . MAIN '(' ')' block

    MAIN  shift, and go to state 14


state 5

    0 $accept: start . $end

    $end  shift, and go to state 15


state 6

    1 start: declarations . VOID MAIN '(' argument_list ')' block
    3      | declarations . VOID MAIN '(' ')' block

    VOID  shift, and go to state 16


state 7

   15 variable_declaration: type . IDENTIFIER ';'
   16                     | type . IDENTIFIER '=' all_expression ';'
   17 function_declaration: type . IDENTIFIER '(' ')' '{' statements RETURN_statement '}'
   18                     | type . IDENTIFIER '(' argument_list ')' '{' statements RETURN_statement '}'

    IDENTIFIER  shift, and go to state 17


state 8

    5 declarations: variable_declaration .

    $default  reduce using rule 5 (declarations)


state 9

    6 declarations: function_declaration .

    $default  reduce using rule 6 (declarations)


state 10

    7 declarations: error "void" .

    $default  reduce using rule 7 (declarations)


state 11

    8 declarations: error ';' .

    $default  reduce using rule 8 (declarations)


state 12

    9 declarations: error '}' .

    $default  reduce using rule 9 (declarations)


state 13

   10 declarations: error '\n' .

    $default  reduce using rule 10 (declarations)


state 14

    2 start: VOID MAIN . '(' argument_list ')' block
    4      | VOID MAIN . '(' ')' block

    '('  shift, and go to state 18


state 15

    0 $accept: start $end .

    $default  accept


state 16

    1 start: declarations VOID . MAIN '(' argument_list ')' block
    3      | declarations VOID . MAIN '(' ')' block

    MAIN  shift, and go to state 19


state 17

   15 variable_declaration: type IDENTIFIER . ';'
   16                     | type IDENTIFIER . '=' all_expression ';'
   17 function_declaration: type IDENTIFIER . '(' ')' '{' statements RETURN_statement '}'
   18                     | type IDENTIFIER . '(' argument_list ')' '{' statements RETURN_statement '}'

    '('  shift, and go to state 20
    ';'  shift, and go to state 21
    '='  shift, and go to state 22


state 18

    2 start: VOID MAIN '(' . argument_list ')' block
    4      | VOID MAIN '(' . ')' block

    INT   shift, and go to state 2
    BOOL  shift, and go to state 3
    ')'   shift, and go to state 23

    type           go to state 24
    argument_list  go to state 25
    argument       go to state 26


state 19

    1 start: declarations VOID MAIN . '(' argument_list ')' block
    3      | declarations VOID MAIN . '(' ')' block

    '('  shift, and go to state 27


state 20

   17 function_declaration: type IDENTIFIER '(' . ')' '{' statements RETURN_statement '}'
   18                     | type IDENTIFIER '(' . argument_list ')' '{' statements RETURN_statement '}'

    INT   shift, and go to state 2
    BOOL  shift, and go to state 3
    ')'   shift, and go to state 28

    type           go to state 24
    argument_list  go to state 29
    argument       go to state 26


state 21

   15 variable_declaration: type IDENTIFIER ';' .

    $default  reduce using rule 15 (variable_declaration)


state 22

   16 variable_declaration: type IDENTIFIER '=' . all_expression ';'

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    all_expression             go to state 36
    expression                 go to state 37
    expression_unit            go to state 38
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41
    logical_expression         go to state 42


state 23

    4 start: VOID MAIN '(' ')' . block

    '{'  shift, and go to state 43

    block  go to state 44


state 24

   24 argument: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 45


state 25

    2 start: VOID MAIN '(' argument_list . ')' block

    ')'  shift, and go to state 46


state 26

   22 argument_list: argument .
   23              | argument . ',' argument_list

    ','  shift, and go to state 47

    $default  reduce using rule 22 (argument_list)


state 27

    1 start: declarations VOID MAIN '(' . argument_list ')' block
    3      | declarations VOID MAIN '(' . ')' block

    INT   shift, and go to state 2
    BOOL  shift, and go to state 3
    ')'   shift, and go to state 48

    type           go to state 24
    argument_list  go to state 49
    argument       go to state 26


state 28

   17 function_declaration: type IDENTIFIER '(' ')' . '{' statements RETURN_statement '}'

    '{'  shift, and go to state 50


state 29

   18 function_declaration: type IDENTIFIER '(' argument_list . ')' '{' statements RETURN_statement '}'

    ')'  shift, and go to state 51


state 30

   47 expression_unit: CONSTANT .

    $default  reduce using rule 47 (expression_unit)


state 31

   48 expression_unit: IDENTIFIER .

    $default  reduce using rule 48 (expression_unit)


state 32

   64 logical_expression: TRUE .

    $default  reduce using rule 64 (logical_expression)


state 33

   65 logical_expression: FALSE .

    $default  reduce using rule 65 (logical_expression)


state 34

   49 expression_unit: '(' . expression ')'

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    expression                 go to state 52
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 35

   51 unary_expression: '-' . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 54


state 36

   16 variable_declaration: type IDENTIFIER '=' all_expression . ';'

    ';'  shift, and go to state 55


state 37

   43 all_expression: expression .

    $default  reduce using rule 43 (all_expression)


state 38

   50 unary_expression: expression_unit .
   58 logical_expression: expression_unit . '<' expression_unit
   59                   | expression_unit . '>' expression_unit
   60                   | expression_unit . LE expression_unit
   61                   | expression_unit . GE expression_unit
   62                   | expression_unit . EQ expression_unit
   63                   | expression_unit . NE expression_unit

    GE   shift, and go to state 56
    LE   shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    $default  reduce using rule 50 (unary_expression)


state 39

   55 multiplicative_expression: unary_expression .

    $default  reduce using rule 55 (multiplicative_expression)


state 40

   45 expression: additive_expression .
   53 additive_expression: additive_expression . '+' multiplicative_expression
   54                    | additive_expression . '-' multiplicative_expression

    '-'  shift, and go to state 62
    '+'  shift, and go to state 63

    $default  reduce using rule 45 (expression)


state 41

   52 additive_expression: multiplicative_expression .
   56 multiplicative_expression: multiplicative_expression . '*' unary_expression
   57                          | multiplicative_expression . '/' unary_expression

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 52 (additive_expression)


state 42

   44 all_expression: logical_expression .
   66 logical_expression: logical_expression . AND expression_unit
   67                   | logical_expression . OR expression_unit

    AND  shift, and go to state 66
    OR   shift, and go to state 67

    $default  reduce using rule 44 (all_expression)


state 43

   13 block: '{' . statements '}'
   14      | '{' . '}'

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '}'         shift, and go to state 73
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statements                 go to state 77
    statement                  go to state 78
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 44

    4 start: VOID MAIN '(' ')' block .

    $default  reduce using rule 4 (start)


state 45

   24 argument: type IDENTIFIER .

    $default  reduce using rule 24 (argument)


state 46

    2 start: VOID MAIN '(' argument_list ')' . block

    '{'  shift, and go to state 43

    block  go to state 84


state 47

   23 argument_list: argument ',' . argument_list

    INT   shift, and go to state 2
    BOOL  shift, and go to state 3

    type           go to state 24
    argument_list  go to state 85
    argument       go to state 26


state 48

    3 start: declarations VOID MAIN '(' ')' . block

    '{'  shift, and go to state 43

    block  go to state 86


state 49

    1 start: declarations VOID MAIN '(' argument_list . ')' block

    ')'  shift, and go to state 87


state 50

   17 function_declaration: type IDENTIFIER '(' ')' '{' . statements RETURN_statement '}'

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statements                 go to state 88
    statement                  go to state 78
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 51

   18 function_declaration: type IDENTIFIER '(' argument_list ')' . '{' statements RETURN_statement '}'

    '{'  shift, and go to state 89


state 52

   49 expression_unit: '(' expression . ')'

    ')'  shift, and go to state 90


state 53

   50 unary_expression: expression_unit .

    $default  reduce using rule 50 (unary_expression)


state 54

   51 unary_expression: '-' expression_unit .

    $default  reduce using rule 51 (unary_expression)


state 55

   16 variable_declaration: type IDENTIFIER '=' all_expression ';' .

    $default  reduce using rule 16 (variable_declaration)


state 56

   61 logical_expression: expression_unit GE . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 91


state 57

   60 logical_expression: expression_unit LE . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 92


state 58

   63 logical_expression: expression_unit NE . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 93


state 59

   62 logical_expression: expression_unit EQ . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 94


state 60

   58 logical_expression: expression_unit '<' . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 95


state 61

   59 logical_expression: expression_unit '>' . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 96


state 62

   54 additive_expression: additive_expression '-' . multiplicative_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    expression_unit            go to state 53
    unary_expression           go to state 39
    multiplicative_expression  go to state 97


state 63

   53 additive_expression: additive_expression '+' . multiplicative_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    expression_unit            go to state 53
    unary_expression           go to state 39
    multiplicative_expression  go to state 98


state 64

   56 multiplicative_expression: multiplicative_expression '*' . unary_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    expression_unit   go to state 53
    unary_expression  go to state 99


state 65

   57 multiplicative_expression: multiplicative_expression '/' . unary_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    expression_unit   go to state 53
    unary_expression  go to state 100


state 66

   66 logical_expression: logical_expression AND . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 101


state 67

   67 logical_expression: logical_expression OR . expression_unit

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 34

    expression_unit  go to state 102


state 68

   33 statement: error . ';'
   34          | error . '}'
   35          | error . '\n'

    ';'   shift, and go to state 103
    '}'   shift, and go to state 104
    '\n'  shift, and go to state 105


state 69

   36 function_call_statement: IDENTIFIER . '(' parameters ')' ';'
   37                        | IDENTIFIER . '(' ')' ';'
   46 assignment_expression: IDENTIFIER . '=' all_expression
   48 expression_unit: IDENTIFIER .

    '('  shift, and go to state 106
    '='  shift, and go to state 107

    $default  reduce using rule 48 (expression_unit)


state 70

   40 IF_statement: IF . '(' logical_expression ')' statement
   41             | IF . '(' logical_expression ')' statement ELSE statement

    '('  shift, and go to state 108


state 71

   42 WHILE_statement: WHILE . '(' logical_expression ')' statement

    '('  shift, and go to state 109


state 72

   25 statement: ';' .

    $default  reduce using rule 25 (statement)


state 73

   14 block: '{' '}' .

    $default  reduce using rule 14 (block)


state 74

   15 variable_declaration: type . IDENTIFIER ';'
   16                     | type . IDENTIFIER '=' all_expression ';'

    IDENTIFIER  shift, and go to state 110


state 75

   32 statement: block .

    $default  reduce using rule 32 (statement)


state 76

   26 statement: variable_declaration .

    $default  reduce using rule 26 (statement)


state 77

   13 block: '{' statements . '}'

    '}'  shift, and go to state 111


state 78

   20 statements: statement .
   21           | statement . statements

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    RETURN  reduce using rule 20 (statements)
    '}'     reduce using rule 20 (statements)

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statements                 go to state 112
    statement                  go to state 78
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 79

   31 statement: function_call_statement .

    $default  reduce using rule 31 (statement)


state 80

   29 statement: IF_statement .

    $default  reduce using rule 29 (statement)


state 81

   30 statement: WHILE_statement .

    $default  reduce using rule 30 (statement)


state 82

   27 statement: expression . ';'

    ';'  shift, and go to state 113


state 83

   28 statement: assignment_expression . ';'

    ';'  shift, and go to state 114


state 84

    2 start: VOID MAIN '(' argument_list ')' block .

    $default  reduce using rule 2 (start)


state 85

   23 argument_list: argument ',' argument_list .

    $default  reduce using rule 23 (argument_list)


state 86

    3 start: declarations VOID MAIN '(' ')' block .

    $default  reduce using rule 3 (start)


state 87

    1 start: declarations VOID MAIN '(' argument_list ')' . block

    '{'  shift, and go to state 43

    block  go to state 115


state 88

   17 function_declaration: type IDENTIFIER '(' ')' '{' statements . RETURN_statement '}'

    RETURN  shift, and go to state 116

    RETURN_statement  go to state 117


state 89

   18 function_declaration: type IDENTIFIER '(' argument_list ')' '{' . statements RETURN_statement '}'

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statements                 go to state 118
    statement                  go to state 78
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 90

   49 expression_unit: '(' expression ')' .

    $default  reduce using rule 49 (expression_unit)


state 91

   61 logical_expression: expression_unit GE expression_unit .

    $default  reduce using rule 61 (logical_expression)


state 92

   60 logical_expression: expression_unit LE expression_unit .

    $default  reduce using rule 60 (logical_expression)


state 93

   63 logical_expression: expression_unit NE expression_unit .

    $default  reduce using rule 63 (logical_expression)


state 94

   62 logical_expression: expression_unit EQ expression_unit .

    $default  reduce using rule 62 (logical_expression)


state 95

   58 logical_expression: expression_unit '<' expression_unit .

    $default  reduce using rule 58 (logical_expression)


state 96

   59 logical_expression: expression_unit '>' expression_unit .

    $default  reduce using rule 59 (logical_expression)


state 97

   54 additive_expression: additive_expression '-' multiplicative_expression .
   56 multiplicative_expression: multiplicative_expression . '*' unary_expression
   57                          | multiplicative_expression . '/' unary_expression

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 54 (additive_expression)


state 98

   53 additive_expression: additive_expression '+' multiplicative_expression .
   56 multiplicative_expression: multiplicative_expression . '*' unary_expression
   57                          | multiplicative_expression . '/' unary_expression

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 53 (additive_expression)


state 99

   56 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 56 (multiplicative_expression)


state 100

   57 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 57 (multiplicative_expression)


state 101

   66 logical_expression: logical_expression AND expression_unit .

    $default  reduce using rule 66 (logical_expression)


state 102

   67 logical_expression: logical_expression OR expression_unit .

    $default  reduce using rule 67 (logical_expression)


state 103

   33 statement: error ';' .

    $default  reduce using rule 33 (statement)


state 104

   34 statement: error '}' .

    $default  reduce using rule 34 (statement)


state 105

   35 statement: error '\n' .

    $default  reduce using rule 35 (statement)


state 106

   36 function_call_statement: IDENTIFIER '(' . parameters ')' ';'
   37                        | IDENTIFIER '(' . ')' ';'

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34
    ')'         shift, and go to state 119
    '-'         shift, and go to state 35

    parameters                 go to state 120
    all_expression             go to state 121
    expression                 go to state 37
    expression_unit            go to state 38
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41
    logical_expression         go to state 42


state 107

   46 assignment_expression: IDENTIFIER '=' . all_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    all_expression             go to state 122
    expression                 go to state 37
    expression_unit            go to state 38
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41
    logical_expression         go to state 42


state 108

   40 IF_statement: IF '(' . logical_expression ')' statement
   41             | IF '(' . logical_expression ')' statement ELSE statement

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34

    expression_unit     go to state 123
    logical_expression  go to state 124


state 109

   42 WHILE_statement: WHILE '(' . logical_expression ')' statement

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34

    expression_unit     go to state 123
    logical_expression  go to state 125


state 110

   15 variable_declaration: type IDENTIFIER . ';'
   16                     | type IDENTIFIER . '=' all_expression ';'

    ';'  shift, and go to state 21
    '='  shift, and go to state 22


state 111

   13 block: '{' statements '}' .

    $default  reduce using rule 13 (block)


state 112

   21 statements: statement statements .

    $default  reduce using rule 21 (statements)


state 113

   27 statement: expression ';' .

    $default  reduce using rule 27 (statement)


state 114

   28 statement: assignment_expression ';' .

    $default  reduce using rule 28 (statement)


state 115

    1 start: declarations VOID MAIN '(' argument_list ')' block .

    $default  reduce using rule 1 (start)


state 116

   19 RETURN_statement: RETURN . all_expression ';'

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    all_expression             go to state 126
    expression                 go to state 37
    expression_unit            go to state 38
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41
    logical_expression         go to state 42


state 117

   17 function_declaration: type IDENTIFIER '(' ')' '{' statements RETURN_statement . '}'

    '}'  shift, and go to state 127


state 118

   18 function_declaration: type IDENTIFIER '(' argument_list ')' '{' statements . RETURN_statement '}'

    RETURN  shift, and go to state 116

    RETURN_statement  go to state 128


state 119

   37 function_call_statement: IDENTIFIER '(' ')' . ';'

    ';'  shift, and go to state 129


state 120

   36 function_call_statement: IDENTIFIER '(' parameters . ')' ';'
   39 parameters: parameters . ',' all_expression

    ')'  shift, and go to state 130
    ','  shift, and go to state 131


state 121

   38 parameters: all_expression .

    $default  reduce using rule 38 (parameters)


state 122

   46 assignment_expression: IDENTIFIER '=' all_expression .

    $default  reduce using rule 46 (assignment_expression)


state 123

   58 logical_expression: expression_unit . '<' expression_unit
   59                   | expression_unit . '>' expression_unit
   60                   | expression_unit . LE expression_unit
   61                   | expression_unit . GE expression_unit
   62                   | expression_unit . EQ expression_unit
   63                   | expression_unit . NE expression_unit

    GE   shift, and go to state 56
    LE   shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '<'  shift, and go to state 60
    '>'  shift, and go to state 61


state 124

   40 IF_statement: IF '(' logical_expression . ')' statement
   41             | IF '(' logical_expression . ')' statement ELSE statement
   66 logical_expression: logical_expression . AND expression_unit
   67                   | logical_expression . OR expression_unit

    AND  shift, and go to state 66
    OR   shift, and go to state 67
    ')'  shift, and go to state 132


state 125

   42 WHILE_statement: WHILE '(' logical_expression . ')' statement
   66 logical_expression: logical_expression . AND expression_unit
   67                   | logical_expression . OR expression_unit

    AND  shift, and go to state 66
    OR   shift, and go to state 67
    ')'  shift, and go to state 133


state 126

   19 RETURN_statement: RETURN all_expression . ';'

    ';'  shift, and go to state 134


state 127

   17 function_declaration: type IDENTIFIER '(' ')' '{' statements RETURN_statement '}' .

    $default  reduce using rule 17 (function_declaration)


state 128

   18 function_declaration: type IDENTIFIER '(' argument_list ')' '{' statements RETURN_statement . '}'

    '}'  shift, and go to state 135


state 129

   37 function_call_statement: IDENTIFIER '(' ')' ';' .

    $default  reduce using rule 37 (function_call_statement)


state 130

   36 function_call_statement: IDENTIFIER '(' parameters ')' . ';'

    ';'  shift, and go to state 136


state 131

   39 parameters: parameters ',' . all_expression

    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    '('         shift, and go to state 34
    '-'         shift, and go to state 35

    all_expression             go to state 137
    expression                 go to state 37
    expression_unit            go to state 38
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41
    logical_expression         go to state 42


state 132

   40 IF_statement: IF '(' logical_expression ')' . statement
   41             | IF '(' logical_expression ')' . statement ELSE statement

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statement                  go to state 138
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 133

   42 WHILE_statement: WHILE '(' logical_expression ')' . statement

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statement                  go to state 139
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 134

   19 RETURN_statement: RETURN all_expression ';' .

    $default  reduce using rule 19 (RETURN_statement)


state 135

   18 function_declaration: type IDENTIFIER '(' argument_list ')' '{' statements RETURN_statement '}' .

    $default  reduce using rule 18 (function_declaration)


state 136

   36 function_call_statement: IDENTIFIER '(' parameters ')' ';' .

    $default  reduce using rule 36 (function_call_statement)


state 137

   39 parameters: parameters ',' all_expression .

    $default  reduce using rule 39 (parameters)


state 138

   40 IF_statement: IF '(' logical_expression ')' statement .
   41             | IF '(' logical_expression ')' statement . ELSE statement

    ELSE  shift, and go to state 140

    $default  reduce using rule 40 (IF_statement)


state 139

   42 WHILE_statement: WHILE '(' logical_expression ')' statement .

    $default  reduce using rule 42 (WHILE_statement)


state 140

   41 IF_statement: IF '(' logical_expression ')' statement ELSE . statement

    error       shift, and go to state 68
    CONSTANT    shift, and go to state 30
    IDENTIFIER  shift, and go to state 69
    INT         shift, and go to state 2
    BOOL        shift, and go to state 3
    IF          shift, and go to state 70
    WHILE       shift, and go to state 71
    '('         shift, and go to state 34
    ';'         shift, and go to state 72
    '{'         shift, and go to state 43
    '-'         shift, and go to state 35

    type                       go to state 74
    block                      go to state 75
    variable_declaration       go to state 76
    statement                  go to state 141
    function_call_statement    go to state 79
    IF_statement               go to state 80
    WHILE_statement            go to state 81
    expression                 go to state 82
    assignment_expression      go to state 83
    expression_unit            go to state 53
    unary_expression           go to state 39
    additive_expression        go to state 40
    multiplicative_expression  go to state 41


state 141

   41 IF_statement: IF '(' logical_expression ')' statement ELSE statement .

    $default  reduce using rule 41 (IF_statement)
